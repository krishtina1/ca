module alu_4bit (
    input [3:0] a,
    input [3:0] b,
    input [2:0] sel,
    output reg [3:0] result
);
always @(*) begin
    case (sel)
        3'b000: result = a + b;      // ADD
        3'b001: result = a - b;      // SUB
        3'b010: result = a & b;      // AND
        3'b011: result = a | b;      // OR
        3'b100: result = a ^ b;      // XOR
        3'b101: result = ~a;         // NOT
        3'b110: result = a << 1;     // Shift Left
        3'b111: result = a >> 1;     // Shift Right
        default: result = 4'b0000;   // Default to 0
    endcase
end
endmodule

module alu_tb;
    reg [3:0] a, b;
    reg [2:0] sel;
    wire [3:0] result;
    alu_4bit uut (
        .a(a),
        .b(b),
        .sel(sel),
        .result(result)
    );
    initial begin
        // Create VCD file
        $dumpfile("alu.vcd");  // Name of the VCD file
        $dumpvars(0, alu_tb);     // Dump all signals in the testbench
        // Test cases
        a = 4'b0101; b = 4'b0011; sel = 3'b000;
        #10;       
        a = 4'b0110; b = 4'b0011; sel = 3'b001;
        #10;        
        a = 4'b1100; b = 4'b1010; sel = 3'b010;
        #10;        
        a = 4'b1100; b = 4'b1010; sel = 3'b011;
        #10;
        a = 4'b1100; b = 4'b1010; sel = 3'b100;
        #10;
        a = 4'b1100; b = 4'b0000; sel = 3'b101;
        #10;
        a = 4'b0101; b = 4'b0000; sel = 3'b110;
        #10;
        a = 4'b0101; b = 4'b0000; sel = 3'b111;
        #10;
        // End simulation
        $finish;
    end
endmodule
