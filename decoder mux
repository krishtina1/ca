DECODER
module decoder(a, b, c, y);
    input a, b, c;
    output [7:0] y;
    assign y[0] = ~a & ~b & ~c;
    assign y[1] = ~a & ~b &  c;
    assign y[2] = ~a &  b & ~c;
    assign y[3] = ~a &  b &  c;
    assign y[4] =  a & ~b & ~c;
    assign y[5] =  a & ~b &  c;
    assign y[6] =  a &  b & ~c;
    assign y[7] =  a &  b &  c;
endmodule
`include "decoder.v"
module decoder_tb;
    reg a, b, c;
    wire [7:0] y;
    decoder uut (a, b, c, y);
    initial begin
        $dumpfile("decoder.vcd");
        $dumpvars(0, decoder_tb);
        a = 0; b = 0; c = 0; #10;
        a = 0; b = 0; c = 1; #10;
        a = 0; b = 1; c = 0; #10;
        a = 0; b = 1; c = 1; #10;
        a = 1; b = 0; c = 0; #10;
        a = 1; b = 0; c = 1; #10;
        a = 1; b = 1; c = 0; #10;
        a = 1; b = 1; c = 1; #10;
        $finish;
    end
endmodule


MULTIPLEXER
module multiplexer(a, b, c, d, s0, s1, y);
    input a, b, c, d, s0, s1;
    output y;
    assign y = (~s1 & ~s0 & a) | (~s1 &  s0 & b) | ( s1 & ~s0 & c) |  ( s1 &  s0 & d);
endmodule
`include "mux.v"
module mux_tb;
    reg a, b, c, d, s0, s1;
    wire y;
    multiplexer m1 (a, b, c, d, s0, s1, y);
    initial begin
        $dumpfile("mux.vcd");
        $dumpvars(0, mux_tb);
        a = 1; b = 0; c = 1; d = 0;
        s1 = 0; s0 = 0; #10;
        s1 = 0; s0 = 1; #10;
        s1 = 1; s0 = 0; #10;
        s1 = 1; s0 = 1; #10;
        $finish;
    end
endmodule
